// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: proto/inference.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FaceDetection_DetectFaces_FullMethodName = "/inference.FaceDetection/DetectFaces"
)

// FaceDetectionClient is the client API for FaceDetection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaceDetectionClient interface {
	DetectFaces(ctx context.Context, in *FrameRequest, opts ...grpc.CallOption) (*DetectionResponse, error)
}

type faceDetectionClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceDetectionClient(cc grpc.ClientConnInterface) FaceDetectionClient {
	return &faceDetectionClient{cc}
}

func (c *faceDetectionClient) DetectFaces(ctx context.Context, in *FrameRequest, opts ...grpc.CallOption) (*DetectionResponse, error) {
	out := new(DetectionResponse)
	err := c.cc.Invoke(ctx, FaceDetection_DetectFaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceDetectionServer is the server API for FaceDetection service.
// All implementations must embed UnimplementedFaceDetectionServer
// for forward compatibility
type FaceDetectionServer interface {
	DetectFaces(context.Context, *FrameRequest) (*DetectionResponse, error)
	mustEmbedUnimplementedFaceDetectionServer()
}

// UnimplementedFaceDetectionServer must be embedded to have forward compatible implementations.
type UnimplementedFaceDetectionServer struct {
}

func (UnimplementedFaceDetectionServer) DetectFaces(context.Context, *FrameRequest) (*DetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectFaces not implemented")
}
func (UnimplementedFaceDetectionServer) mustEmbedUnimplementedFaceDetectionServer() {}

// UnsafeFaceDetectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaceDetectionServer will
// result in compilation errors.
type UnsafeFaceDetectionServer interface {
	mustEmbedUnimplementedFaceDetectionServer()
}

func RegisterFaceDetectionServer(s grpc.ServiceRegistrar, srv FaceDetectionServer) {
	s.RegisterService(&FaceDetection_ServiceDesc, srv)
}

func _FaceDetection_DetectFaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceDetectionServer).DetectFaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaceDetection_DetectFaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceDetectionServer).DetectFaces(ctx, req.(*FrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaceDetection_ServiceDesc is the grpc.ServiceDesc for FaceDetection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaceDetection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inference.FaceDetection",
	HandlerType: (*FaceDetectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectFaces",
			Handler:    _FaceDetection_DetectFaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inference.proto",
}
